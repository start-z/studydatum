
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

	
	upstream test{
		server 127.0.0.1:8106;
		server localhost:9047 backup;
	}
	# 代理缓存配置
   proxy_cache_path "./hyw_cachedata"  levels=1:2 keys_zone=hywcache:256m inactive=1d max_size=1000g; 

	#设置请求压缩 由于压缩发生在请求时 所以会对性能有一定影响
    gzip  on;
	#压缩的类型 值为MIME类型
	gzip_types image/png;
	#压缩的最小字节
	gzip_min_length 1;
	#开启请求解压缩
	gunzip on;
	
	server{
		listen 9047;
		server_name	localhost;
		
		location 	/role/listByRole{
		alias html;
		index	50x.html	50x.htm;
		}
	}

    server {
        listen       8080;
        server_name  localhost;
		#使用缓存名称
          proxy_cache hywcache;
		  #对以下状态码实现缓存
          proxy_cache_valid 200 206 304 301 302 1d;
		  #缓存的key
          proxy_cache_key $host$request_uri$cookie_user;
		  #多少次才开始缓存
		  proxy_cache_min_uses 2;
          add_header X-Cache-Status $upstream_cache_status;
		  #响应时间在指定范围内才进行缓存 200表示状态码 （如果想限制所有状态码  proxy_cache_valid any 5m ）
		  proxy_cache_valid 200 1s;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
		
		# return 重定向只能是状态码301 302 303 304  200状态码可以返回文本
		location /wrong/url {
			return 200 "Hello, World!";
		}
		location /api {
			proxy_pass	http://test/;
		}
		
		location /img {
			#开启目录显示  
			autoindex on;
		}
		
		location /test {
			alias html/img;
			#index表示优先匹配显示的文件
			index 1.jpg 1.html 1.htm;
		}
		
		location /tryfile-1 {
			alias html/img;
			#尝试去找文件 如果存在这个文件就直接返回这个文件不管你输入的后缀url是怎样的  如果不存在就返回指定规则
			#try_files $uri $uri/ /2.jpg  =403;
			try_files $uri $uri/ /2.jpg  @val;
		}
		
		location @val{
			proxy_pass http://localhost:8080;
		}
		
		location /testImg{
			proxy_pass http://localhost:8080/;
		}

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
